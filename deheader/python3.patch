--- deheader	(original)
+++ deheader	(refactored)
@@ -30,7 +30,7 @@
 The last line of the output is a statistical summary of operations.
 """
 
-import sys, os, getopt, time, re, operator, commands
+import sys, os, getopt, time, re, operator, subprocess
 
 BATON_DEBUG    = 1
 PROGRESS_DEBUG = 2
@@ -1243,19 +1243,19 @@
             if not os.path.isdir(root):
                 if excludes and excludes.search(root):
                     if verbose > 1:
-                        print "deheader: %s excluded" % root
+                        print("deheader: %s excluded" % root)
                 elif InclusionMap.c_source(root):
                     self.files.append(root)
                 else:
-                    print >>sys.stderr, "deheader: can't analyze %s" % root
+                    print("deheader: can't analyze %s" % root, file=sys.stderr)
             else:
                 for root, dirs, files in os.walk(root):
-                    dirs = filter(lambda x: not x.startswith("."), dirs)
+                    dirs = [x for x in dirs if not x.startswith(".")]
                     for name in files:
                         path = os.path.join(root, name)
                         if excludes and excludes.search(path):
                             if verbose > 1:
-                                print "deheader: %s excluded" % root
+                                print("deheader: %s excluded" % root)
                         elif InclusionMap.c_source(path):
                             self.files.append(path)
         self.depends_on = {}
@@ -1277,15 +1277,15 @@
                 elif line.startswith("#include"):
                     if verbosity >= PROGRESS_DEBUG:
                         name = trim(line)
-                        print "deheader: %s includes %s" % (sourcefile, name)
+                        print("deheader: %s includes %s" % (sourcefile, name))
                     if ignore and ignore.search(line):
                         if verbosity >= PROGRESS_DEBUG:
-                            print "deheader: ignoring %s (exclusion match with %s)." % (name, ignore.pattern)
+                            print("deheader: ignoring %s (exclusion match with %s)." % (name, ignore.pattern))
                         continue
                     if not conditions or conditions == ["S_SPLINT_S"]:
                         includes.append(line)
                     elif verbose > 1:
-                        print "deheader: ignoring %s (conditional inclusion)" % name
+                        print("deheader: ignoring %s (conditional inclusion)" % name)
                 for (r, c, h) in compiled:
                     if c.search(line):
                         if not set(h).issubset(set(seen)):
@@ -1299,7 +1299,7 @@
                 trimmedcount[ref] = trimmedcount.get(ref, 0) + 1
             for ref in trimmedcount:
                 if trimmedcount[ref] > 1:
-                    print "deheader: %s has more than one inclusion of %s" % (sourcefile, ref)
+                    print("deheader: %s has more than one inclusion of %s" % (sourcefile, ref))
     def forget(self, sourcefile, header):
         "Forget a header dependency."
         self.depends_on[sourcefile].remove(header)
@@ -1350,7 +1350,7 @@
         os.remove(derived)
     command = maker + " " + derived
     start = time.time()
-    (status, output) = commands.getstatusoutput(command)
+    (status, output) = subprocess.getstatusoutput(command)
     end = time.time()
     if verbosity >= COMMAND_DEBUG or (showerrs and os.WIFEXITED(status) and os.WEXITSTATUS(status) != 0):
         sys.stdout.write(output + "\n")
@@ -1361,7 +1361,7 @@
     else:
         explain = "succeeded"
     if verbosity >= PROGRESS_DEBUG:
-        print "deheader: %s%s %s." % (source, msg, explain)
+        print("deheader: %s%s %s." % (source, msg, explain))
     if os.path.exists(derived):
         os.remove(derived)
     return (status, end - start)
@@ -1386,7 +1386,7 @@
                     for required in requirements:
                         if required in header:
                             if verbosity >= PROGRESS_DEBUG:
-                                print "deheader: in %s, %s prevents uninclusion of %s" % (sourcefile, trigger, trim(header))
+                                print("deheader: in %s, %s prevents uninclusion of %s" % (sourcefile, trigger, trim(header)))
                             retain += 1
                 if not retain:
                     saveit.remove_headers([header])
@@ -1403,10 +1403,10 @@
             baton.end()
     # Missing-require detection.  Can't be merged with duplicate-header
     # detection because this has to be done after unneeded headers are removed.
-    stillhere = map(trim, includes)
+    stillhere = list(map(trim, includes))
     for (requirement, trigger) in requires:
         if not set(requirement).issubset(stillhere):
-            print "deheader: in %s, %s portability requires %s." % (sourcefile, trigger, ",".join(requirement))
+            print("deheader: in %s, %s portability requires %s." % (sourcefile, trigger, ",".join(requirement)))
     return unneeded
 
 def deheader(sourcefile, maker, includes, requires, remove, verbose):
@@ -1420,7 +1420,7 @@
                                  includes[:], requires, verbose)
         if unneeded:
             for line in unneeded:
-                print "deheader: remove %s from %s" % (trim(line), sourcefile)
+                print("deheader: remove %s from %s" % (trim(line), sourcefile))
             if remove:
                 remove_it = SaveForModification(sourcefile)
                 remove_it.remove_headers(unneeded)
@@ -1428,7 +1428,7 @@
                 del remove_it
         return Summary([sourcefile], includes, unneeded)
     else:
-        print >>sys.stderr, "deheader: basic compilation failed on %s" % (sourcefile,)
+        print("deheader: basic compilation failed on %s" % (sourcefile,), file=sys.stderr)
         return Summary([sourcefile], includes, [])
 
 # After-action analysis starts here
@@ -1474,7 +1474,7 @@
         elif switch in ('-v', '--verbose'):
             verbose += 1
         elif switch in ('-V', '--version'):
-            print "deheader", version
+            print("deheader", version)
             raise SystemExit(0)
         elif switch in ('-x', '--exclude'):
             exclusions.append(val)
@@ -1500,7 +1500,7 @@
         stats = Summary()
         for summary in summaries:
             stats = stats + summary
-        print "deheader: saw", stats
+        print("deheader: saw", stats)
     raise SystemExit(0)
 
 # End
